
esphome:
  name: can-switch
  on_boot:
    priority: 500
    then:
      - logger.log: "BOOT!"
      - lambda: |-
          // receive state of entity#4 on node#1 (as csdo#0 is configured for node#1)
          id(can_gate).csdo_recv(0, ENTITY_STATE_KEY(4, 0), [=](uint32_t value, uint32_t err) {
            ESP_LOGI("sdo", "received: %08x, err: %08x", value, err);
            if(err) return;
            if(value) {
              id(light_switch).turn_on();
            } else {
              id(light_switch).turn_off();
            }
          });

external_components:
  - source: ../components
  # - source: github://mrk-its/esphome-canopen

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""
  reboot_timeout: 0s

ota:
  password: ""

esp32:
  board: esp32dev
  framework:
    type: arduino

wifi:
  <<: !include {file: wifi.yaml}

canbus:
  - platform: esp32_can
    id: can_bus
    rx_pin: GPIO22
    tx_pin: GPIO23
    can_id: 0
    bit_rate: 125kbps

canopen:
  id: can_gate
  canbus_id: can_bus
  node_id: 2
  csdo:
    - node_id: 1
  entities:
    - id: light_switch
      index: 1
      tpdo: 0  # offset: 0, size: 1 (state: byte)
      rpdo:
        # state of blue_light as defined in can-node.yaml
        # following definition means:
        # when tpdo#1 from node#1 is received
        # then store byte from offset=2 (representing state of the light)
        # to light_switch cmd#0, keeping switch state in sync with light state.
        - node_id: 1
          tpdo: 1
          offset: 2
          cmd: 0  # it refers to 'light_switch' cmd#0

binary_sensor:
  - platform: gpio
    name: "Button"
    id: button
    internal: true
    on_click:
      min_length: 50ms
      max_length: 350ms
      then:
        - switch.toggle: light_switch
    pin:
      number: GPIO0
      inverted: true

switch:
  - platform: gpio
    name: "Light Switch"
    id: light_switch
    internal: true
    pin: GPIO2